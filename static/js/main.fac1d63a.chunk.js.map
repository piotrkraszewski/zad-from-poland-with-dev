{"version":3,"sources":["AppFiles/AppContext.js","images/no_image.png","AppFiles/Cards.js","AppFiles/SearchBar.js","images/BgGreen.jpg","App.js","testingFiles/serviceWorker.js","index.js"],"names":["AppContext","createContext","FullscreenSearch","searchRes","useContext","addDefaultSrc","ev","target","src","no_image","className","exitBeforeEnter","div","initial","opacity","animate","exit","map","item","Poster","onError","alt","Title","undefined","StartPageSearch","searchbarText","handleChange","onSubmit","e","preventDefault","onChange","type","placeholder","value","App","useState","setSearchRes","setSearchbarText","a","axios","get","response","data","Search","useEffect","fetchStartPage","searchOMDB","lastIndexOf","substring","console","log","length","url","then","Provider","BgGreen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iOAEaA,G,KAAaC,wBAAc,O,uBCFzB,MAA0B,qC,OCO1B,SAASC,IAAoB,IACnCC,EAAaC,qBAAWJ,GAAxBG,UAEDE,EAAgB,SAAAC,GACpBA,EAAGC,OAAOC,IAAMC,GAGlB,OACE,qBAAKC,UAAU,iBAAf,SACE,qBAAKA,UAAU,QAAf,SACE,cAAC,IAAD,CAAiBC,iBAAe,EAAhC,SACE,cAAC,IAAOC,IAAR,CAEEC,QAAS,CAAEC,QAAS,GACpBC,QAAS,CAAED,QAAS,GACpBE,KAAM,CAAEF,QAAS,GACjBJ,UAAU,MALZ,SAOCP,EACGA,EAAUc,KAAI,SAACC,GAAD,OACd,qBAAKR,UAAU,wCAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBACEA,UAAU,cACVF,IAAKU,EAAKC,OACVC,QAASf,EACTgB,IAAI,iBAEN,oBAAIX,UAAU,YAAd,SAA2BQ,EAAKI,UAPPJ,EAAKI,YAWlC,mBAAGZ,UAAU,OAAb,8BApBiBa,IAAdpB,GAA2BA,EAAU,GAAGmB,aCf1C,SAASE,IAAmB,IAAD,EACFpB,qBAAWJ,GAA1CyB,EADiC,EACjCA,cAAeC,EADkB,EAClBA,aAEtB,OACE,qBAAKhB,UAAW,+CAAhB,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,sBAAMiB,SAAU,SAAAC,GAAOA,EAAEC,kBAAzB,SACE,uBACEC,SAAUJ,EACVhB,UAAW,SACXqB,KAAK,OACLC,YAAY,wBACZC,MAAOR,YCjBN,UAA0B,oCCQ1B,SAASS,IAAO,MAGKC,qBAHL,mBAGtBhC,EAHsB,KAGXiC,EAHW,OAIaD,mBAAS,IAJtB,mBAItBV,EAJsB,KAIPY,EAJO,iDAM7B,4BAAAC,EAAA,sEACyBC,IAAMC,IAAN,uDADzB,OACQC,EADR,OAEEL,EAAaK,EAASC,KAAKC,QAF7B,4CAN6B,sBAc7BC,qBAAU,WACa,KAAlBnB,GAfwB,mCAeDoB,KACzB,CAACpB,IAMJ,IAKMqB,EAAa,SAACb,GAElB,KAAMA,EAAMc,YAAY,MAAQ,GAC9Bd,EAAQA,EAAMe,UAAU,EAAGf,EAAMc,YAAY,MAI/C,GAFAE,QAAQC,IAAI,SAAWjB,GAEnBA,EAAMkB,OAAS,EAAG,CACpB,IAAMC,EAAG,oCAAgCnB,EAAhC,oBACTM,IAAMC,IAAIY,GAAKC,MAAK,SAAAZ,GAClBL,EAAaK,EAASC,KAAKC,aAqBnC,OAZEC,qBAAU,WACRK,QAAQC,IAAI,CAAC/C,gBACZ,CAACA,IAEJyC,qBAAU,WACRK,QAAQC,IAAR,yBAA8BzB,MAC7B,CAACA,IAOJ,gCAEE,eAACzB,EAAWsD,SAAZ,CACErB,MAAO,CAAER,gBAAetB,YAAWuB,aAxClB,SAAAE,GACnBS,EAAiBT,EAAErB,OAAO0B,OAC1Ba,EAAWlB,EAAErB,OAAO0B,SAqCpB,UAGE,cAAC,EAAD,IACA,cAAC,EAAD,OAGF,qBAAKvB,UAAU,eACf,qBAAKF,IAAK+C,EAAS7C,UAAU,eCjEb8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAASC,OACL,cAAC5B,EAAD,IACJ6B,SAASC,eAAe,SD6HlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.fac1d63a.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nexport const AppContext = createContext(null)","export default __webpack_public_path__ + \"static/media/no_image.2f8a70e1.png\";","import { useContext } from 'react'\r\nimport '../styles/main.scss'\r\nimport { AppContext } from './AppContext'\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport no_image from '../images/no_image.png'\r\n\r\n\r\nexport default function FullscreenSearch() {\r\n  const {searchRes} = useContext(AppContext)\r\n\r\n  const addDefaultSrc = ev => {\r\n    ev.target.src = no_image\r\n  }\r\n\r\n  return (\r\n    <div className='cardsContainer'>\r\n      <div className='cards'>\r\n        <AnimatePresence exitBeforeEnter>\r\n          <motion.div \r\n            key={searchRes !== undefined && searchRes[0].Title}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1}}\r\n            exit={{ opacity: 0 }}\r\n            className='row'\r\n          > \r\n          {searchRes  \r\n            ? searchRes.map((item) => \r\n              <div className='cardContainer col-xl-2 col-md-3 col-4'>\r\n                <div className='card' key={item.Title}>\r\n                  <img \r\n                    className='posterImage' \r\n                    src={item.Poster} \r\n                    onError={addDefaultSrc} // when Image from link doesn't exist\r\n                    alt='poster image' \r\n                  />\r\n                  <h1 className='cardTitle'>{item.Title}</h1>\r\n                </div>\r\n              </div>\r\n            )\r\n            : <p className='text'>no resluts</p>\r\n          }\r\n          </motion.div>\r\n        </AnimatePresence>\r\n      </div>\r\n  </div>\r\n  )\r\n}","import { useContext } from 'react'\r\nimport '../styles/main.scss'\r\nimport { AppContext } from './AppContext'\r\n\r\nexport default function StartPageSearch() {\r\n  const {searchbarText, handleChange} = useContext(AppContext)\r\n\r\n  return (\r\n    <div className={'col-lg-6 col-md-8 col-sm-9 col-12 searchBar '}>\r\n      <div className='row'>\r\n        <div className='col-12' >\r\n          <form onSubmit={e => { e.preventDefault()}}>\r\n            <input\r\n              onChange={handleChange}\r\n              className={'myForm'}\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={searchbarText}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/BgGreen.a17d9a1b.jpg\";","import { useState, useEffect } from 'react'\r\nimport './styles/main.scss'\r\nimport { AppContext } from './AppFiles/AppContext'\r\nimport axios from 'axios'\r\nimport Cards from './AppFiles/Cards'\r\nimport SearchBar from './AppFiles/SearchBar'\r\nimport BgGreen from './images/BgGreen.jpg'\r\n\r\nexport default function App () {\r\n\r\n// ==== Fetch onStart ====\r\n  const [searchRes, setSearchRes] = useState()\r\n  const [searchbarText, setSearchbarText] = useState('')\r\n  \r\n  async function fetchStartPage() {\r\n    const response = await axios.get(`http://www.omdbapi.com/?s=star+wars&apikey=b4ce7e92`)\r\n    setSearchRes(response.data.Search)\r\n  }\r\n  \r\n  // if search is empty app display star wars results \r\n  // loads at page starup because searchbarText === '' at start\r\n  // checks this condition every time\r\n  useEffect(() => {\r\n    if(searchbarText === '' ){fetchStartPage()} \r\n  }, [searchbarText])\r\n// ==== END Fetch StartPage ====\r\n\r\n\r\n// ==== Search state and functions ====\r\n\r\n  const handleChange = e => {\r\n    setSearchbarText(e.target.value)\r\n    searchOMDB(e.target.value)\r\n  }\r\n\r\n  const searchOMDB = (value)=>{\r\n    // prevents error of whitespace at the end of search str so you can write \"star wars\"\r\n    while(value.lastIndexOf(\" \") >= 0)\r\n      value = value.substring(0, value.lastIndexOf(\" \"))\r\n    \r\n    console.log('value:' + value)\r\n\r\n    if (value.length > 2) {\r\n      const url = `http://www.omdbapi.com/?s=${value}&apikey=b4ce7e92`\r\n      axios.get(url).then(response => {\r\n        setSearchRes(response.data.Search)\r\n      })\r\n    } \r\n  }\r\n// ==== END Search state and functions ====\r\n\r\n\r\n// ==== Console log stuff ====\r\n\r\n  useEffect(() => {\r\n    console.log({searchRes})\r\n  }, [searchRes])\r\n\r\n  useEffect(() => {\r\n    console.log(`searchbarText: ${searchbarText}`)\r\n  }, [searchbarText])\r\n\r\n// ==== END Console log stuff ====\r\n\r\n\r\n\r\nreturn (\r\n  <div>\r\n    {/* I know that context is uncessary and I can just pass props but I thought that I show that I can use it */}\r\n    <AppContext.Provider \r\n      value={{ searchbarText, searchRes, handleChange }}\r\n    >\r\n      <SearchBar/>\r\n      <Cards/>\r\n    </AppContext.Provider>\r\n\r\n    <div className='BgGradient'/>\r\n    <img src={BgGreen} className='BgImage'/>\r\n  </div>\r\n)\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './testingFiles/serviceWorker'\r\n\r\nReactDOM.render(\r\n    <App />,\r\ndocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}